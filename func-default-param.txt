자바스크립트 함수 인수를 
function(a, b) {
}
로 선언시와
function({a, b}) {
}
로 선언시 디폴트 값을 선언하는 방법을 알려주세요

자바스크립트에서 함수 인수에 기본값을 설정하는 방법은 함수를 선언하는 형식에 따라 다릅니다. 

### `function(a, b) {}` 방식에서 기본값 설정

이 방식에서는 함수 정의 시 각 매개변수에 대해 기본값을 직접 할당할 수 있습니다. ES6 이전에는 이를 위한 명시적인 구문이 없었기 때문에, 함수 본문 내에서 조건문을 사용하여 인수의 기본값을 설정해야 했습니다. ES6부터는 매개변수에 직접 기본값을 할당하는 문법을 지원합니다.

```javascript
function sum(a = 0, b = 0) {
  return a + b;
}

console.log(sum(1)); // 1을 출력 (b의 기본값은 0)
console.log(sum()); // 0을 출력 (a와 b 모두 기본값 사용)
```

### `function({a, b}) {}` 방식에서 기본값 설정

이 방식은 구조 분해 할당(destructuring assignment)을 사용하여 객체의 속성을 함수 매개변수로 직접 매핑합니다. 여기에서도 각 매개변수에 기본값을 설정할 수 있으며, 함수에 전달되는 객체 내에서 해당 속성이 없을 경우에 이 기본값들이 사용됩니다.

```javascript
function sum({a = 0, b = 0} = {}) {
  return a + b;
}

console.log(sum({a: 1, b: 2})); // 3을 출력
console.log(sum({a: 1})); // 1을 출력 (b의 기본값은 0)
console.log(sum()); // 0을 출력 (a와 b 모두 기본값 사용, 함수 호출 시 아무런 인수도 전달하지 않으면 전체 매개변수 객체에 대한 기본값이 필요)
```

두 번째 예제에서 함수 전체에 대한 기본 매개변수 `{}`를 설정하는 것은 함수 호출 시 인수를 전혀 전달하지 않았을 때 발생할 수 있는 오류를 방지합니다. 이렇게 하면, 매개변수로 전달된 객체가 `undefined`일 경우에도 함수 내부에서 `a`와 `b`에 접근할 때 오류가 발생하지 않고 각각의 기본값을 사용하게 됩니다.

두 방식 모두에서 기본값은 함수 호출 시 해당 인수를 생략했을 때 사용됩니다. 선택된 방식과 상황에 맞게 적절한 기본값 설정 방법을 사용할 수 있습니다.
